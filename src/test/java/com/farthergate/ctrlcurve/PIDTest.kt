/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.farthergate.ctrlcurve

import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test

internal class PIDTest {
    @Test
    @Throws(InterruptedException::class)
    fun basicPID() {
        val kp = 0.75
        val ti = 5000.0
        val td = 5000.0
        val tolerance = 1.0
        val initial = 0.0
        val target = 10.0
        val dt = 10.0 // ms

        var current = initial

        var previousError = target - current
        var integral = 0.0
        var t = 0.0
        while (t < 5) {
            val error = target - current
            val proportional = error
            integral = integral + error * dt
            val derivative = (error - previousError) / dt
            current += kp * (proportional + integral / ti + td * derivative / 1000)
            previousError = error
            Thread.sleep(dt.toLong())
            t += dt / 1000
        }
        if ((target - current) > tolerance) Assertions.fail<Any>("Could not calculate PID after 5 seconds")
    }

    @Test
    @Throws(InterruptedException::class)
    fun canRunPID() {
        val kp = 0.75
        val ti = 50.0
        val td = 50.0
        val tolerance = 0.2
        val initial = 0.0
        val target = 50.0

        println("\"current\",\"error\",\"proportional\",\"integral\",\"derivative\",\"correction\",\"result\"")

        var current = initial

        val pid = PID(kp, ti, td, 10.0, tolerance, initial, target)
        while (pid.shouldContinue()) {
            val correction = pid.correction()

            println(String.format("%f,%f,%f,%f,%f,%f,%f", current, target - current, pid.proportional(), pid.integral(), pid.derivative(), correction, current + correction))

            current += correction
            if (pid.t > 5000) Assertions.fail<Any>("PID took more than 5 seconds")
            pid.update(current)
        }

        Assertions.assertEquals(true, (target - current) <= tolerance)
    }
}
