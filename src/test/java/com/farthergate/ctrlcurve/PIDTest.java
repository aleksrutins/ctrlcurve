/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.farthergate.ctrlcurve;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

class PIDTest {
    @Test void basicPID() throws InterruptedException {
        double kp = 0.75;
        double ti = 5000.0;
        double td = 5000.0;
        double tolerance = 1.0;
        double initial = 0.0;
        double target = 10.0;
        double dt = 10.0; // ms

        double current = initial;

        double previousError = target - current;
        double integral = 0;
        for(double t = 0; t < 5; t += dt/1000) {
            var error = target - current;
            var proportional = error;
            integral = integral + error*dt;
            var derivative = (error - previousError) / dt;
            current += kp * (proportional + integral/ti + td*derivative/1000);
            previousError = error;
            Thread.sleep((long)dt);
        }
        if((target - current) > tolerance) fail("Could not calculate PID after 5 seconds");
    }
    @Test void canRunPID() throws InterruptedException {
        double kp = 0.75;
        double ti = 50.0;
        double td = 50.0;
        double tolerance = 0.2;
        double initial = 0.0;
        double target = 50.0;

        System.out.println("\"current\",\"error\",\"proportional\",\"integral\",\"derivative\",\"correction\",\"result\"");

        double current = initial;

        for(var pid = new PID(kp, ti, td, 10, tolerance, initial, target); pid.shouldContinue(); pid.update(current)) {
            var correction = pid.correction();
            
            System.out.println(String.format("%f,%f,%f,%f,%f,%f,%f", current, target - current, pid.proportional(), pid.integral(), pid.derivative(), correction, current + correction));

            current += correction;
            if(pid.t > 5000) fail("PID took more than 5 seconds");
        }

        assertEquals(true, (target - current) <= tolerance);
    }
}
